import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # Cost from start node to current node
        self.h = h  # Heuristic (estimated cost from current node to goal node)

    def __lt__(self, other):
        return (self.g + self.h) < (other.g + other.h)

def astar_search(start_state, goal_state, heuristic, neighbors):
    start_node = Node(state=start_state, g=0, h=heuristic(start_state, goal_state))
    open_set = [start_node]
    closed_set = set()

    while open_set:
        current_node = heapq.heappop(open_set)

        if current_node.state == goal_state:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.state)

        for neighbor in neighbors(current_node.state):
            if neighbor in closed_set:
                continue

            g = current_node.g + 1  # Assuming unit cost for each step
            h = heuristic(neighbor, goal_state)
            new_node = Node(state=neighbor, parent=current_node, g=g, h=h)

            if new_node not in open_set:
                heapq.heappush(open_set, new_node)

    return None  # No path found

# Example usage:
if __name__ == "__main__":
    # Define a simple 2D grid as the environment
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0]
    ]

    start = (0, 0)
    goal = (4, 4)

    def heuristic(state, goal_state):
        return abs(state[0] - goal_state[0]) + abs(state[1] - goal_state[1])

    def neighbors(state):
        x, y = state
        possible_neighbors = [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]
        return [(nx, ny) for nx, ny in possible_neighbors if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 0]

    path = astar_search(start, goal, heuristic, neighbors)

    if path:
        print("A* Path:", path)
    else:
        print("No path found.")
